Documentation
=============

Getting Started
---------------

1. Create a new Maven project and add the dependency to your pom.xml:

```xml
<dependency>
    <groupId>org.minijax</groupId>
    <artifactId>minijax-core</artifactId>
    <version>${project.version}</version>
</dependency>
```

2. Start coding:

```java
import javax.ws.rs.GET;
import javax.ws.rs.Path;

import org.minijax.Minijax;

@Path("/")
public class Hello {

    @GET
    public static String hello() {
        return "Hello world!";
    }

    public static void main(String[] args) {
        new Minijax()
                .register(Hello.class)
                .run(8080);
    }
}
```

3. Run and view:

> <http://localhost:8080>

Resource Methods
----------------

The main building blocks of JAX-RS applications are **Resource Classes** and **Resource Methods**.

A **Resource Class** is a POJO annotated with a `@Path` annotation.

```java
@Path("users")
public class UsersResource {
    // ...
}

@Path("path/to/widgets")
public class WidgetsResource {
    // ...
}
```

A **Resource Method** is a method annotated with an HTTP verb annotation such as `@GET` or `@POST`.

```java
@GET
public Response get() {
    // Get something
}

@POST
public Response post() {
    // Create something
}

@PUT
public Response put() {
    // Update something
}

@DELETE
public Response delete() {
    // Delete something
}
```

Path Parameters
---------------

Route patterns can include named parameters, accessible via `@PathParam` annotated arguments:

```java
// Matches "GET /hello/foo"

@GET
@Path("/hello/{name}")
public String get(@PathParam("name") String name) {
    return "Hello " + name;
}
```

Query Parameters
----------------

Query string parameters are accessible via `@QueryParam` annotated arguments:


```java
// Matches "GET /hello?name=foo"

@GET
@Path("/hello")
public String get(@QueryParam("name") String name) {
    return "Hello " + name;
}
```

Form Parameters
---------------

There are several options for retrieving form parameters.

Retrieve individual form elements using `@FormParam` annotated arguments:

```java
@POST
@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
public String handleSubmit(
        @FormParam("name") String name,
        @FormParam("email") String email) {
    return "Hello " + name + " <" + email + ">";
}
```

Retrieve the entire form as a `MultivaluedMap<String, String>`:

```java
@POST
@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
public String handleSubmit(MultivaluedMap<String, String> formParams) {
    return "Hello " + formParams.getFirst("name");
}
```

Retrieve multipart data (such as file uploads) using `java.io.InputStream`:

```java
@POST
@Consumes(MediaType.MULTIPART_FORM_DATA)
public String handleUpload(@FormParam("file") final InputStream file)
        throws IOException {
    return "File contents: " + IOUtils.toString(file, "UTF-8");
}
```

For more advanced discussion on cross-platform considerations of multipart form data,
visit the [Forms](/forms.html) documentation.

Learn More
----------

* [Sample Applications](minijax-examples/index.html) - Demonstrating Minijax capabilities
* [Supported Java EE standards](javaee.html) - Overview of supported API's
